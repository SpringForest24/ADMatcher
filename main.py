import torch
import os
import argparse
from torch_geometric import seed_everything
from Augmentation.tab_printer import tab_printer
from Augmentation import Method
from GraphMatchDatasets.dataset import GraphMatchDataset

#确定一些超参数
def get_parser():
    parser = argparse.ArgumentParser(description='GCLSMN Arguments')

    #key setting
    parser.add_argument('--method', type=str, default='GraphCL', choices=['GraphCL', 'JOAO', 'GraphCL_AUG', 'JOAO_AUG', 'InfoGraph'])
    
    parser.add_argument("--dataset", type=str, default='Synthetic', choices=['Synthetic','IMDB-BINARY', 'AIDS', 'REDDIT-BINARY', 'COLLAB', 'COX2', 'ENZYMES', 'PROTEINS', 'MUTAG'],
                        help="Dataset name, can be chosen from Choices")
    parser.add_argument("--feature", type=str, default='uniform', choices=['one', 'origin', 'uniform', 'deg'],
                        help="Use input features generated by different methods, can be chosen from "
                             "{'one': all [1] features, "
                             "'origin: if nodes have features, use that. If do not have, use [1]"
                             "'uniform':ripout all the node features, only focus on strcuture,"
                             " 'deg': use one-hot degree as node feature, ")

    #basic setting
    parser.add_argument('--seed', type=int, default=42, help='Random seed')
    parser.add_argument("--times", type=int, default=3,
                        help="The number of repetitions of the experiment.")
    parser.add_argument("--save_path", type=str, default=None,
                        help="The name of the folder to save log."
                             "The default path is a subfolder named as method name under the folder 'log'.")
    parser.add_argument("--device", type=str, default=None,
                        help="Running environment, 'cpu' or 'cuda'.")

    #Dataset Preprocess with augment
    parser.add_argument("--pn", type=float, default=0.2,
                        help="The probability of dropping node, removing edge, or sampling subgraph.")
    parser.add_argument("--factor", type=float, default=0.2,
                        help="The decay factor of dropping probability in CTAug-Pro, "
                             "or the factor considering cohesive property in CTAug-DT.")
    parser.add_argument("--cal_weight", type=str, default='node',
                        help="Choose the edge weight calculation strategy from {'node', 'edge'}."
                             "Only used in CTAug-MVGRL method.")
    parser.add_argument("--core", type=str, default='ndrop', choices=['both', 'kcore', 'ktruss','ndrop','edrop','fmask','subsample', 'no'],
                        help="Subgraph property, can be chosen from {'kcore', 'ktruss', 'both'}."
                             "It's only used in CTAug-GRACE and CTAug-GCA methods.")

    #Model training
    parser.add_argument("--epoch", type=int, default=60,
                        help="Training epoch.")
    parser.add_argument("--batch_size", type=int, default=64,
                        help="Batch size of dataset partition.")
    parser.add_argument("--shuffle", type=bool, default=True,
                        help="Shuffle the graphs in the dataset or not.")
    parser.add_argument("--hid_units", type=int, default=128,
                        help="Dimension of hidden layers and embedding.")
    parser.add_argument("--num_layer", type=int, default=2,
                        help="Number of GConv layers.")
    parser.add_argument("--sample", type=int, default=None,
                        help="Number of sampled graphs to train model.")

    #Model Saving and evaluation
    parser.add_argument("--interval", type=int, default=20,
                        help="Interval epoch to test.")
    parser.add_argument("--save_model", type=bool, default=False,
                        help="Whether to save the model.")
    parser.add_argument("--save_embed", type=bool, default=True,
                        help="Whether to save the model.")
    parser.add_argument("--eval_model", type=bool, default=True,
                        help="Evaluate immediately or save the model.")
    parser.add_argument("--norm", type=bool, default=False,
                        help="Whether normalize embedding before logistic regression test.")

    return parser

#设置一些默认参数
def arg_parse(parser0):
    args = parser0.parse_args()

    if args.device is None:
        args.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    if args.save_path is None:
        args.save_path = 'log/' + args.method + '_' + args.feature + '_' + args.dataset

    if not os.path.exists(args.save_path):
        os.makedirs(args.save_path)

    return args

if __name__ == '__main__':
    parser = get_parser()
    args = parser.parse_args()
    args = arg_parse(parser0=parser)
    tab_printer(args)

    seed_everything(args.seed)
    method = Method(args)
    method.train()